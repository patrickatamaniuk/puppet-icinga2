#
# define standard apply rules for services
#
# a host can subscribe by setting a custom var corresponding to the service
# More services are autogenerated on the fly by other target:: classes
#
class icinga2::server::stdservices(
  $template_to_import = 'generic-service',
  $target_dir         = "/etc/icinga2/objects/applys",
  # predefined checks, ready for use by any host
  $nrpe_checks        = [ 'disk', 'load', 'swap', 'zombie_procs', 'users', 'ntp' ],
  $port_checks        = [], #[ 'tcp_22', 'tcp_80', 'tcp_443', 'udp_53', 'tcp_53' ],
) {
  validate_array($nrpe_checks)
  validate_array($port_checks)

  apply_port_service { $port_checks:
    template_to_import => $template_to_import,
    target_dir         => $target_dir,
  }

  icinga2::server::stdservices::apply_nrpe_service { $nrpe_checks:
    template_to_import => $template_to_import,
    target_dir         => $target_dir,
  }
}

#
# usage:
# @@icinga2::server::stdservices::apply_port_service { "tcp_80_${::fqdn}":
#   proto => tcp,
#   port  => 80
# }
#
define icinga2::server::stdservices::apply_port_service(
  $object_servicename = $name,
  $proto = undef, #must be tcp or udp
  $port = undef,
  $check_command = undef, #defaults to $proto
  $assign_where = undef,  #defaults to "host.vars.check_${real_proto}_${real_port} == true",
  $template_to_import = 'generic-service',
  $target_dir        = "/etc/icinga2/objects/applys",
) {
  validate_string($object_servicename)
  validate_string($template_to_import)
  validate_string($target_dir)

  $args = split($name, '_')
  $real_proto = pick($proto, $args[0])
  $real_port = pick($port, $args[1])
  $real_check_command = pick($check_command, $real_proto)
  validate_string($target_dir)

  case $real_proto {
    'udp': {
      $vars = { udp_port => $real_port }
      fail("Udp nrpe check is not properly implemented, yet")
      #need send/expect parameter for check_udp nagios plugin These must be configured properly for each specific udp test.
    }
    default: {
      $vars = { tcp_port => $real_port }
    }
  }
  $real_assign_where = pick($assign_where, "host.vars.check_${real_proto}_${real_port} == true")
  $svc_name = "${real_proto}_${real_port}"

  if (!defined(Icinga2::Object::Apply_service_to_host[$svc_name])) {
    icinga2::object::apply_service_to_host { $svc_name:
      display_name       => "${real_proto} check ${svc_name}",
      check_command      => $real_check_command,
      template_to_import => $template_to_import,
      target_dir => $target_dir,
      assign_where => $real_assign_where,
      vars => $vars,
    }
  }
}

#
# this is used on targets as exported resource
# to announce that they use a service.
# the icinga server collects these and provides
# service apply configurations then.
#
# the corresponding nrpe command is generated by example42::monitor class.
#
#  usage:
#  @@icinga2::server::stdservices::apply_nrpe_service { "${assign_var}_${::fqdn}":
#    object_servicename => "${process}", # use a common object for every target
#    nrpe_command  => "check_process_${process}",
#    display_name  => "Process check ${process}",
#    assign_where  => "host.vars.${assign_var} == true",
#    tag           => "icinga2_check_${icinga2::target::magic_tag}",
#  }
#
define icinga2::server::stdservices::apply_nrpe_service(
  $object_servicename = $name,
  $check_command = 'nrpe',
  $nrpe_command  = "check_${name}",
  $assign_where  = "host.vars.check_nrpe_stdservices == true",
  $display_name  = "Nrpe ${nrpe_command}",
  $template_to_import = 'generic-service',
  $target_dir    = "/etc/icinga2/objects/applys",
  $target_file_name = undef,
) {
  $safe_name = regsubst($nrpe_command, '[^a-zA-Z0-9_-]', '_', 'G')
  $svc_name = "Nrpe_${safe_name}"
  $real_target_file_name = pick($target_file_name, "${svc_name}.conf")

  # this service might be exported by serveral hosts, so
  # we need to check if we already got an instance on the icinga server.
  if (!defined(Icinga2::Object::Apply_service_to_host[$svc_name])) {
      icinga2::object::apply_service_to_host { $svc_name:
        object_servicename => $object_servicename,
        display_name       => $display_name,
        check_command      => 'nrpe',
        template_to_import => $template_to_import,
        target_dir => $target_dir,
        target_file_name => $target_file_name,
        assign_where => $assign_where,
        vars => {
          nrpe_command => $nrpe_command,
        },
      }
  }
}

#
# this is used on targets as exported resource
# to announce that they use a service.
# the icinga server collects these and provides
# service apply configurations then.
#
# the service is one of the icinga check_commands
#
define icinga2::server::stdservices::apply_check_command_service(
  $object_servicename = $name,
  $command            = $name,
  $assign_where       = "host.vars.check_icinga_stdservices == true",
  $display_name       = "${name}",
  $template_to_import = 'generic-service',
  $target_dir         = "/etc/icinga2/objects/applys",
  $target_file_name   = undef,
  $vars               = {},
) {
  $svc_name = "${object_servicename}"
  $real_target_filename = pick($target_file_name, "${object_servicename}.conf")
  if (!defined(Icinga2::Object::Apply_service_to_host[$svc_name])) {
      icinga2::object::apply_service_to_host { $svc_name:
        object_servicename => $object_servicename,
        display_name       => $display_name,
        check_command      => $command,
        template_to_import => $template_to_import,
        target_dir         => $target_dir,
        target_file_name   => $real_target_filename,
        assign_where       => $assign_where,
        vars               => $vars,
      }
  }
}
